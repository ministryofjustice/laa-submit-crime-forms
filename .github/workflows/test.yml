name: Test, Lint & Scan

on:
  pull_request:
    branches:
      - main

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read
  security-events: write
  checks: write

env:
  RACK_ENV: test
  RAILS_ENV: test
  DATABASE_URL: postgres://postgres:postgres@localhost:5432/laa_claim_non_standard_magistrate_fee_test

jobs:
  lint:
    name: Lint and verify
    runs-on: ubuntu-latest
    permissions:
      contents: read
    strategy:
      fail-fast: false
      matrix:
        environment: [dev, uat, prod]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          bundler-cache: true

      - name: Run Rubocop
        run: |
          bundle exec rubocop --format github --format progress

      - name: Set up Helm
        uses: azure/setup-helm@v4
        with:
          version: '3.7.2'

      - name: Cache pip packages
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-yamllint
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install yamllint
        run: |
          pip install yamllint

      - name: Lint helm chart for ${{ matrix.environment }}
        run: helm lint helm_deploy --values helm_deploy/values-${{ matrix.environment }}.yaml

      - name: Check helm template for ${{ matrix.environment }}
        run: |
          helm template --debug helm_deploy --values helm_deploy/values-${{ matrix.environment }}.yaml > /tmp/helm-output.yaml
          yamllint /tmp/helm-output.yaml -f github

  test:
    name: RSpec tests
    runs-on: ubuntu-latest
    permissions:
      contents: read
      checks: write
    services:
      postgres:
        image: postgres:13.12
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: laa_claim_non_standard_magistrate_fee_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          bundler-cache: true

      - name: Set up Node
        uses: actions/setup-node@v4
        with:
          node-version-file: '.nvmrc'
          cache: 'yarn'

      - name: Install dependencies
        run: yarn install --frozen-lockfile

      - name: Cache Puppeteer
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/puppeteer
            node_modules/puppeteer
          key: ${{ runner.os }}-puppeteer-22.15.0
          restore-keys: |
            ${{ runner.os }}-puppeteer-

      - name: Build assets
        run: |
          yarn build
          yarn build:css

      - name: Install Chrome
        uses: browser-actions/setup-chrome@v1
        with:
          chrome-version: stable

      - name: Install Puppeteer
        run: yarn add puppeteer@22.15.0

      - name: Setup database
        run: |
          bundle exec rails db:setup
          bundle exec flatware fan rails db:test:prepare

      - name: Run RSpec tests with Flatware
        env:
          RUBYOPT: -W:no-deprecated
          INCLUDE_ACCESSIBILITY_SPECS: true
        run: |
          bundle exec flatware rspec \
            --format progress \
            --format RspecJunitFormatter \
            --out tmp/test-results/rspec/rspec.xml

      - name: Publish test results
        uses: EnricoMi/publish-unit-test-result-action@v2
        if: always()
        with:
          files: tmp/test-results/rspec/rspec.xml
          check_name: RSpec Test Results
          comment_mode: off

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: tmp/test-results/rspec

      - name: Upload coverage results
        uses: actions/upload-artifact@v4
        with:
          name: coverage-results
          path: coverage

      - name: Upload capybara screenshots
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: capybara-screenshots
          path: tmp/capybara

  coverage:
    name: Process coverage
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          bundler-cache: true

      - name: Download coverage results
        uses: actions/download-artifact@v4
        with:
          name: coverage-results
          path: coverage

      - name: Upload final coverage
        uses: actions/upload-artifact@v4
        with:
          name: coverage-final
          path: coverage

  build-for-scan:
    name: Build image for scanning
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: false
          load: true
          outputs: type=docker,dest=/tmp/app-image.tar
          tags: app:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
          provenance: false
          build-args: |
            APP_BUILD_DATE=${{ github.event.head_commit.timestamp }}
            APP_BUILD_TAG=${{ github.sha }}
            APP_GIT_COMMIT=${{ github.sha }}
            APP_BRANCH_NAME=${{ github.ref_name }}

      - name: Upload Docker image artifact
        uses: actions/upload-artifact@v4
        with:
          name: docker-image
          path: /tmp/app-image.tar
          retention-days: 1

  trivy-scan:
    name: Trivy security scan
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
    needs: build-for-scan
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download Docker image
        uses: actions/download-artifact@v4
        with:
          name: docker-image
          path: /tmp

      - name: Load Docker image
        run: docker load --input /tmp/app-image.tar

      - name: Run Trivy vulnerability scanner on filesystem
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-fs-results.sarif'
          severity: 'CRITICAL,HIGH'
          exit-code: '0'

      - name: Upload Trivy filesystem scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-fs-results.sarif'
          category: 'trivy-filesystem'

      - name: Run Trivy vulnerability scanner on Docker image
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'image'
          image-ref: 'app:latest'
          format: 'sarif'
          output: 'trivy-image-results.sarif'
          severity: 'CRITICAL,HIGH'
          exit-code: '0'

      - name: Upload Trivy image scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-image-results.sarif'
          category: 'trivy-image'

      - name: Run Trivy config scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'config'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-config-results.sarif'
          severity: 'CRITICAL,HIGH'
          exit-code: '0'

      - name: Upload Trivy config scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-config-results.sarif'
          category: 'trivy-config'

  snyk-scan:
    name: Snyk security scan
    runs-on: ubuntu-latest
    permissions:
      contents: read
    needs: build-for-scan
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          bundler-cache: true

      - name: Download Docker image
        uses: actions/download-artifact@v4
        with:
          name: docker-image
          path: /tmp

      - name: Load Docker image
        run: docker load --input /tmp/app-image.tar

      - name: Install Snyk CLI
        uses: snyk/actions/setup@master

      - name: Snyk test and monitor dependencies
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        run: |
          # Test for vulnerabilities
          snyk test --all-projects --severity-threshold=high || true
          # Monitor dependencies for ongoing tracking
          snyk monitor --all-projects
        continue-on-error: true

      - name: Snyk container monitor
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        run: snyk container monitor app:latest --file=./Dockerfile
        continue-on-error: true
