# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/configuration-reference
version: 2.1

# ------------------
# ORBS
# ------------------
orbs:
  browser-tools: circleci/browser-tools@1.4.7
  snyk: snyk/snyk@2.1.0
  aws-cli: circleci/aws-cli@4.1.3
  aws-ecr: circleci/aws-ecr@9.0.2
  crime-forms-end-to-end-tests: ministryofjustice/crime-forms-end-to-end-tests@volatile
  slack: circleci/slack@4.13.3
  helm: circleci/helm@3.0.2

# ------------------
# EXECUTORS
# ------------------
executors:
  test-executor:
    working_directory: ~/repo
    docker:
      - image: cimg/ruby:3.4.5-browsers
        environment:
          RACK_ENV: test
          RAILS_ENV: test
          DATABASE_URL: postgres://postgres:circleci@127.0.0.1:5432/laa_claim_non_standard_magistrate_fee_test
      - image: cimg/postgres:13.12
        environment:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: laa_claim_non_standard_magistrate_fee_test

  cloud-platform-executor:
    resource_class: small
    docker:
      - image: ministryofjustice/cloud-platform-tools:2.9.9

# ------------------
# REFERENCES
# ------------------
references:
  _main-only: &main-only
    filters:
      branches:
        only: main

  _restore-bundle: &restore-bundle
    restore_cache:
      keys:
        - v1-bundle-{{ .Branch }}-{{ checksum "Gemfile.lock" }}
        # fallback to using the latest cache if no exact match is found
        - v1-bundle-

  _install-bundle: &install-bundle
    run:
      name: Install gems
      command: |
        bundler_version=$(cat Gemfile.lock | tail -1 | tr -d " ")
        gem install bundler -v $bundler_version
        bundle config set path 'vendor/bundle'
        bundle check || bundle install --jobs=4 --retry=3
        bundle clean --force

  _save-bundle: &save-bundle
    save_cache:
      key: v1-bundle-{{ .Branch }}-{{ checksum "Gemfile.lock" }}
      paths:
        - ~/.bundle
        - vendor/bundle

  _restore-assets: &restore-assets
    restore_cache:
      keys:
        - v4-yarn-{{ .Branch }}-{{ checksum "yarn.lock" }}
        # fallback to using the latest asset cache if no exact match is found
        - v4-yarn-

  _install-assets: &install-assets
    run:
      name: Install and compile assets
      command: |
        yarn install && yarn build && yarn build:css

  _save-assets: &save-assets
    save_cache:
      key: v4-yarn-{{ .Branch }}-{{ checksum "yarn.lock" }}
      paths:
        - node_modules
        - app/assets/builds

  _attach-tmp-workspace: &attach-tmp-workspace
    attach_workspace:
      at: ~/repo/tmp

  _install-yamllint: &install-yamllint
    run:
      name: Install yamllint to use to check yaml formatting issues
      command: |
        sudo apt update
        sudo apt install -y python3-pip
        pip install yamllint

# ------------------
# COMMANDS
# ------------------
commands:
  install-gems:
    steps:
      - *restore-bundle
      - *install-bundle
      - *save-bundle

  install-compile-assets:
    steps:
      - *restore-assets
      - *install-assets
      - *save-assets

  install-puppeteer:
    steps:
      - run:
          name: Install Puppeteer with Chromium
          command: |
            yarn add puppeteer@22.15.0

  build-base:
    steps:
      - install-gems
      - install-compile-assets

  rubocop:
    steps:
      - run:
          name: Run rubocop
          command: bundle exec rubocop

  # using a more recent version of yamllink so we can use the key_duplicates rule
  # https://yamllint.readthedocs.io/en/stable/rules.html#module-yamllint.rules.key_duplicates

  lint-and-verify-helm-config:
      description:
      parameters:
        environment:
          description: Name of environment to check helm template of
          type: string
      steps:
        - run:
            name: Lint helm chart for <<parameters.environment>>
            command: helm lint helm_deploy --values helm_deploy/values-<<parameters.environment>>.yaml
        - run:
            name: Check helm template for <<parameters.environment>>
            command: helm template --debug helm_deploy --values helm_deploy/values-<<parameters.environment>>.yaml | yamllint -

  db-setup:
    steps:
      - run:
          name: Wait for DB
          command: dockerize -wait tcp://localhost:5432 -timeout 1m
      - run:
          name: Database setup
          command: |
            bundle exec rails db:prepare

  rspec:
    steps:
      - db-setup
      - run:
          name: Run rspec tests
          command: |
            RUBYOPT=-W:no-deprecated \
            INCLUDE_ACCESSIBILITY_SPECS=true \
            bundle exec rspec \
             --format progress \
             --format RspecJunitFormatter \
             --out /tmp/test-results/rspec/rspec.xml \
             -- $(circleci tests glob "spec/**/*_spec.rb" | circleci tests split --split-by=timings --timings-type=filename)
      - store_test_results:
          path: /tmp/test-results/rspec
      - run:
          name: Stash coverage results
          command: |
            mkdir coverage_results
            cp -R coverage/.resultset.json coverage_results/.resultset-${CIRCLE_NODE_INDEX}.json
      - persist_to_workspace:
          root: .
          paths:
            - coverage_results
      - store_artifacts:
          path: ~/repo/coverage
          destination: coverage
      - store_artifacts:
          path: ~/repo/tmp/capybara

  build-docker-image-for-scan:
      steps:
        - run:
            name: Build docker image of app for scanning
            command: |
              docker build \
              --label build.git.sha=${CIRCLE_SHA1} \
              --label build.git.branch=${CIRCLE_BRANCH} \
              --label build.date=$(date +%Y-%m-%dT%H:%M:%S%z) \
              --build-arg APP_BUILD_DATE=$(date +%Y-%m-%dT%H:%M:%S%z) \
              --build-arg APP_BUILD_TAG=${CIRCLE_SHA1} \
              --build-arg APP_GIT_COMMIT=${CIRCLE_SHA1} \
              --build-arg APP_BRANCH_NAME=${CIRCLE_BRANCH} \
              --pull \
              --tag app \
              --file Dockerfile .\

  deploy-to-environment:
      description: Deploy image to the specified environment
      parameters:
        environment:
          description: Name of environment to deploy to
          type: string
        registry:
          description: Location of ECR images
          type: string
          default: ${AWS_ECR_REGISTRY_ID}.dkr.ecr.${ECR_REGION}.amazonaws.com
      steps:
        - aws-cli/setup:
            role_arn: $ECR_ROLE_TO_ASSUME
            region: $ECR_REGION
        - checkout
        - run:
            name: Authenticate K8s
            command: |
                echo -n ${K8S_CLUSTER_CERT} | base64 -d > ./ca.crt
                kubectl config set-cluster ${K8S_CLUSTER_NAME} --certificate-authority=./ca.crt --server=${K8S_CLUSTER_URL}
                kubectl config set-credentials circleci --token=${K8S_TOKEN}
                kubectl config set-context ${K8S_CLUSTER_NAME} --cluster=${K8S_CLUSTER_NAME} --user=circleci --namespace=${K8S_NAMESPACE}
                kubectl config use-context ${K8S_CLUSTER_NAME}
                kubectl --namespace=${K8S_NAMESPACE} get pods
        - run:
            name: Deploy to << parameters.environment >>
            command: |
              ./bin/deploy << parameters.environment >>

# ------------------
# JOBS
# ------------------
jobs:
  build-test-container:
    executor: test-executor
    steps:
      - checkout
      - build-base

  linter-tests:
    executor: test-executor
    steps:
      - checkout
      - install-gems
      - rubocop
      - helm/install_helm_client:
        version: 3.7.2
      - *install-yamllint
      - lint-and-verify-helm-config:
          environment: dev
      - lint-and-verify-helm-config:
          environment: uat
      - lint-and-verify-helm-config:
          environment: prod

  rspec-tests:
    parallelism: 6
    executor: test-executor
    steps:
      - checkout
      - install-gems
      - install-compile-assets
      - *attach-tmp-workspace
      - browser-tools/install-browser-tools:
          replace-existing-chrome: true
          install-firefox: false
          install-geckodriver: false
          install-chromedriver: false
      - install-puppeteer
      - save_cache:
          name: Saving assets and dependencies cache for use in later steps
          key: nsmf-claim-repo-{{ .Environment.CIRCLE_SHA1 }}
          paths:
            - ~/repo
      - rspec

  coverage:
    executor: test-executor
    steps:
      - attach_workspace:
          at: .
      - restore_cache:
          name: Restoring assets and dependencies cache from tests
          key: nsmf-claim-repo-{{ .Environment.CIRCLE_SHA1 }}
      - run:
          name: Process coverage
          command: |
            bundle exec rake simplecov:process_coverage
      - store_artifacts:
          path: ~/repo/coverage
          destination: coverage

  scan-docker-image:
    executor: test-executor
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
      - build-docker-image-for-scan
      - snyk/install:
          token-variable: SNYK_TOKEN
      - run:
          name: Run static code analysis
          command: snyk code test --severity-threshold=high
      - run:
          name: Test open source dependencies
          command: snyk test --all-projects --policy-path=.snyk --severity-threshold=high
      - run:
          name: Monitor for open source vulnerabilities and license issues
          command: snyk monitor --all-projects
      - run:
          name: Scan container image for vulnerabilities
          command: snyk container test app --file=./Dockerfile --policy-path=.snyk --severity-threshold=high
      - run:
          name: Monitor container image for vulnerabilities
          command: snyk container monitor app
      - helm/install_helm_client:
          version: 3.7.2
      - run:
          name: Test IaC files
          command: |
            # render k8s manifests from helm templates
            helm template ./helm_deploy --output-dir ./output --values helm_deploy/values-prod.yaml

            snyk iac test ./output --report --policy-path=.snyk --severity-threshold=high

  build-to-ecr:
    executor: aws-ecr/default
    steps:
      - checkout
      - aws-cli/setup:
          role_arn: $ECR_ROLE_TO_ASSUME
          region: $ECR_REGION
      - run:
          name: Login to ECR
          command: |
            aws ecr get-login-password --region $ECR_REGION | docker login \
            --username AWS --password-stdin \
            ${AWS_ECR_REGISTRY_ID}.dkr.ecr.${ECR_REGION}.amazonaws.com
      - run:
          name: Set ECR_TAGS environment variable for use in next step
          command: |
            [[ "$CIRCLE_BRANCH" == "main" ]] && ECR_TAGS="main-$CIRCLE_SHA1,latest" || ECR_TAGS="branch-$CIRCLE_SHA1"
            echo "export ECR_TAGS=$ECR_TAGS" >> "$BASH_ENV"
            echo "export APP_BUILD_DATE=$(date +%Y-%m-%dT%H:%M:%S%z)"  >> "$BASH_ENV"
            source "$BASH_ENV"
      - aws-ecr/build_image:
          push_image: true
          tag: ${ECR_TAGS}
          region: $ECR_REGION
          repo: $ECR_REPOSITORY
          account_id: $AWS_ECR_REGISTRY_ID
          extra_build_args: >-
            --build-arg APP_BUILD_DATE=${APP_BUILD_DATE}
            --build-arg APP_BUILD_TAG=${CIRCLE_SHA1}
            --build-arg APP_GIT_COMMIT=${CIRCLE_SHA1}
            --build-arg APP_BRANCH_NAME=${CIRCLE_BRANCH}

  e2e-test-branch:
    executor: crime-forms-end-to-end-tests/e2e-test-executor
    steps:
      - crime-forms-end-to-end-tests/run-e2e-tests:
          e2e_current_image_var: NSCC_PROVIDER_IMAGE
          e2e_current_image: ${AWS_ECR_REGISTRY_ID}.dkr.ecr.${ECR_REGION}.amazonaws.com/${PROVIDER_ECR_REPOSITORY}:branch-${CIRCLE_SHA1}
          e2e_branch: main # Change to work against a fixed e2e test repo branch if needed

  e2e-test-main:
    executor: crime-forms-end-to-end-tests/e2e-test-executor
    steps:
      - crime-forms-end-to-end-tests/run-e2e-tests
      - slack/notify:
          channel: laa-non-standard-crime-claims-prod-alerts
          event: fail
          template: basic_fail_1

  deploy-dev:
    executor: cloud-platform-executor
    steps:
      - deploy-to-environment:
          environment: dev

  deploy-uat:
    executor: cloud-platform-executor
    steps:
      - deploy-to-environment:
          environment: uat
      - slack/notify:
          channel: laa-non-standard-crime-claims-preprod-alerts
          event: fail
          template: basic_fail_1

  deploy-prod:
    executor: cloud-platform-executor
    steps:
      - deploy-to-environment:
          environment: prod
      - slack/notify:
          channel: laa-non-standard-crime-claims-prod-alerts
          event: fail
          template: basic_fail_1

# ------------------
# WORKFLOWS
# ------------------
workflows:
  version: 2
  test-opened-pr:
    jobs:
      - build-test-container:
          filters:
            branches:
              ignore:
                - main
      - linter-tests:
          requires:
            - build-test-container
      - rspec-tests:
          requires:
            - build-test-container
      - coverage:
          requires:
            - rspec-tests
      - scan-docker-image:
          requires:
            - build-test-container

  build-opened-pr:
    jobs:
      - build-to-ecr:
          context: laa-submit-crime-forms-dev
          filters:
            branches:
              ignore:
                - main
      - e2e-test-branch:
          context: laa-crime-forms-e2e-tests
          requires:
            - build-to-ecr
          filters:
            branches:
              ignore:
                - main
      - deploy-dev:
          context: laa-submit-crime-forms-dev
          requires:
            - build-to-ecr

  test-build-deploy-merged-pr:
    jobs:
      - build-test-container:
          filters:
            branches:
              only:
                - main
      - linter-tests:
          requires:
            - build-test-container
      - rspec-tests:
          requires:
            - build-test-container
      - coverage:
          requires:
            - rspec-tests
      - build-to-ecr:
          context: laa-submit-crime-forms-dev
          filters:
            branches:
              only:
                - main
      - e2e-test-main:
          context:
            - laa-crime-forms-e2e-tests
            - laa-non-standard-crime-claims-alerting
          requires:
            - build-to-ecr
            - linter-tests
            - rspec-tests
          filters:
            branches:
              only:
                - main
      - deploy-dev:
          context: laa-submit-crime-forms-dev
          requires:
            - e2e-test-main
      - deploy-uat:
          context:
            - laa-submit-crime-forms-uat
            - laa-non-standard-crime-claims-alerting
          requires:
            - e2e-test-main
          filters:
            branches:
              only:
                - main
      - deploy-prod:
          context:
            - laa-submit-crime-forms-production
            - laa-non-standard-crime-claims-alerting
          requires:
            - deploy-uat
          filters:
            branches:
              only:
                - main
